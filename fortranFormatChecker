#!/usr/bin/perl
#
#   This script is used to check blocking and indenting in fortran
#   programs.
#
#   Initial Completion Date:       5/31/2020
#   Most Recent Modification Date: 5/31/2020
#
#                  Hrant P. Hratchian
#                  Department of Chemistry & Chemical Biology
#                  University of California, Merced
#                  hhratchian@ucmerced.edu
#


##########################################################################
#                                                                        #
#                               MAIN CODE                                #
#                                                                        #
##########################################################################

#
#   Interpret command line arguments and get the list of source code files
#   to process.
#
    foreach(@ARGV){
      chomp($_);
      if(/^-(.*)/){
        die "Unknown argument sent to fortranBlocking: $1\n\n";
      }else {
        push(@srcFiles,$_);
      }
    }
    %rules = &set_rules();
#
#   Go through the source code files, one by one.
#
    foreach $currentSrcFile (@srcFiles){
      print "Processing source file $currentSrcFile\n";
      $numberOfLines = &process_srcFile($currentSrcFile,%rules);
      print "\tDONE processing file...Number of lines = $numberOfLines\n\n";
    }
#
#   All Done!
#
    print "All Done!\n";


##########################################################################
#                                                                        #
#                              SUBROUTINES                               #
#                                                                        #
##########################################################################

    sub process_srcFile{
#
#     This routine takes a scalar with the name of a source code file. This
#     code then processes that file. The output of this routine is an
#     integer giving the number of lines with issues.
#
      use strict;
      my($filename,%rules) = @_;
      my($currentLine,$currentLineIndent,$lineIndent,$lineNumberActual,  
        $lineNumberCoded);
      my($DEBUG,$lineIndent,$commentLine,$trimmedLine,$inContinuation,
        $nextContinuation,$incrementCurrent,$incrementNext,@warningListTemp,
        @warningList,$nWarnings,$temp);
#
      $DEBUG = $rules{'debug'};
      chomp($filename);
#
#     Tell the user what's going on here...
#
      if($DEBUG){print "\n\tInside Routine process_srcFile...file=$filename\n\n"}
#
#     Grab a few key rules from the rules hash table.
#
      $currentLineIndent = $rules{'standardlineindent'};
#
#
#     Open the source code file and then begin processing it.
#
      open SRCFILE,"$filename";
      $lineNumberActual = 0;
      $inContinuation = 0;
      while(<SRCFILE>){
        $currentLine = $_;
        chomp($currentLine);
        $lineNumberActual += 1;
#
        unless($rules{blanklineallowed}){
          if($currentLine =~ /^\s*$/){
            push(@warningList,"Line $lineNumberActual: Found a BLANK LINE.");
          }
        }
        if($currentLine =~ /\s+$/){
          push(@warningList,"Line $lineNumberActual: Found a TRAILING BLANKS.");
        }
        ($commentLine,$trimmedLine) = &isCommentLine($currentLine,%rules);
        unless($commentLine){($lineIndent,$trimmedLine) =
          &remove_lineNumberSpace($trimmedLine,%rules)};
        if($DEBUG){
          if($commentLine){print"\nCOMMENT LINE FOUND:"};
          print "\n--->$currentLine<---\n--->$trimmedLine<---\nIndent = $lineIndent\n\n";
        }
        unless($commentLine){
          ($inContinuation,$nextContinuation,$incrementCurrent,$incrementNext,$trimmedLine) = 
            &continuationLineCheck($inContinuation,$trimmedLine,$currentLine,%rules);
            ($incrementCurrent,$incrementNext,@warningListTemp) = 
              &incrementForLine($lineNumberActual,$trimmedLine,$inContinuation,
              $incrementCurrent,$incrementNext,%rules);
            push(@warningList,@warningListTemp);
          if(($lineIndent-$currentLineIndent) ne $incrementCurrent){
            push(@warningList,"Line $lineNumberActual: Incorrect indentation/blocking.");
            $currentLineIndent = $lineIndent;
          }
          $currentLineIndent += $incrementNext;
          $inContinuation = $nextContinuation;
        }
      }
      close SRCFILE,"$filename";
#
#     Report the result of the check of this current source code file.
#
      print "\tFile $filename";
      $nWarnings = @warningList;
      if(@warningList){
        print " has $nWarnings WARNINGS.\n";
        foreach $temp (@warningList){
          chomp($temp);
          print "\t$temp\n";
        }
      }else{
        print " passed all tests.\n";
      }
#
      return $lineNumberActual;
    }

    sub set_rules{
#
#     This routine sets up the rules hash, which is used to control how
#     thee program tests for and enforces formatting and syntax as it
#     processes source code files.
#
#     There are NO input arguments. The rules hash is the only output
#     argument.
#
#     The list of rules is given in the table below. Default values for
#     each rule is given in a second table afterwards.
#
#     ----------------------------------------------------------------
#     Rule                      Comment
#     ----------------------------------------------------------------
#     debug                     This is TRUE of FALSE to turn on or off
#                               debug printing.
#
#     blankLineAllowed          This is TRUE of FALSE to indicate whether
#                               blank lines are allowed.
#
#     standardLineIndent        This is the number of columns a
#                               standard line should be indented.
#
#     indent                    This is the number of spaces to indent
#                               code blocks when appropriate.
#
#     continuationIndent        This is the number of spaces to indent
#                               code that is part of a continuation block.
#
#     isF77                     This is TRUE of FALSE to indicate whether
#                               FORTRAN 77 rules should be followed for
#                               determining comment lines, continuation
#                               markers, and max length of code lines.
#
#     endDoWithBlock            This is TRUE or FALSE to indicate whether
#                               an endDo statement should block with the
#                               code above it or move back. In either case,
#                               the next line indentation will deincrement.
#
#     endIfWithBlock            This is TRUE or FALSE to indicate whether
#                               an endIf statement should block with the
#                               code above it or move back. In either case,
#                               the next line indentation will deincrement.
#
#     continueWithBlock         This is TRUE or FALSE to indicate whether
#                               an Continue statement should block with the
#                               code above it or move back. In either case,
#                               the next line indentation will deincrement.
#
#     doIndent                  This is the indentation applied to blocks
#                               of Do loops. It defaults to the value given
#                               <indent>.
#
#     ifIndent                  This is the indentation applied to if/then
#                               blocks It defaults to the value given
#                               <indent>.
#     ================================================================
#
#     ----------------------------------------------------------------
#     Rule                      Default Value
#     ----------------------------------------------------------------
#     debug                     FALSE (0)
#     blankLineAllowed          FALSE (0)
#     standardLineIndent        6
#     indent                    2
#     continuationIndent        2
#     isF77                     FALSE (0)
#     endDoWithBlock            FALSE (0)
#     endIfWithBlock            FALSE (0)
#     continueWithBlock         FALSE (0)
#     doIndent                  2
#     ifIndent                  2
#     ================================================================
#
#
      use strict;
      my(%rules);
#
#     Hardwire the general rules in the hash.
#
      $rules{'debug'}              = 0;
      $rules{'blanklineallowed'}   = 0;
      $rules{'standardlineindent'} = 6;
      $rules{'indent'}             = 2;
      $rules{'continuationIndent'} = 2;
      $rules{'isF77'}              = 1;
      $rules{'endifwithblock'}     = 1;
      $rules{'enddowithblock'}     = 0;
      $rules{'continuewithblock'}  = 1;
#
#     Copy the general indentation amount to the different blocks.
#
      unless($rules{'indentdo'}){$rules{'indentdo'} = $rules{'indent'}};
      unless($rules{'indentif'}){$rules{'indentif'} = $rules{'indent'}};
#
      return %rules;
    }

    sub process_line{
#
#     This routine processes a single line of code and determines what its
#     change in indentation should be and what the change in indentation
#     should be for the next line.
#
#     There are two INPUT arguments: (1) the line to process; and (2) the
#     rules hash.
#
#     There are two OUTPUT arguments: (1) the indentation increment that
#     should be applied to this line; and (2) the indentation increment
#     that should be applied to the next line.
#
#
      use strict;
      my($line,%rules) = @_;
      my($lineType);
#
#     Determine the line type of the line being read. Hardwire the rules hash.
#
      $rules{'standardlineindent'} = 7;
      $rules{'indent'}             = 2;
#
      return %rules;
    }

    sub incrementForLine{
#
#     This routine determines the increment that should be expected for the
#     current line and the next line wrt the previous line's increment.
#
#     There are two INPUT arguments: (1) the current line number in the
#     source code file; (2) the current line after being trimmed by Routine
#     remove_lineNumberSpace; (3) the $inContinuation flag; (4) the number
#     of spaces already determined for the current line to be incremented;
#     (5) the number of spaces already determined for the next line to be
#     incremented; and (6) the hash of rules.
#
#     There are three OUTPUT arguments: (1) the number of spaces the current
#     line should be incremented; (2) the number of spaces the next
#     line should be incremented; and (3) a list of warnings generated in
#     this routine.
#
#
      use strict;
      my($lineNumber,$line,$inContinuation,$incrementCurrent,$incrementNext,
        %rules) = @_;
      my(@warningList);
      my($DEBUG);
      $DEBUG = $rules{'debug'};
#
#     Look at the line sent in to determine if it's a special kind of line.
#     If so, check the rules to determine indentation increments for this
#     line and the next one.
#
      if($DEBUG){print "\n\n\t\tInside incrementForLine: line = $line.\n"}
      if($line =~ /^(do .*|do)$/i){
        if($DEBUG){print "\tFound DO line.\n"};
        $incrementCurrent = 0;
        $incrementNext    = $rules{'indentdo'};
      }elsif($line =~ /^enddo *$/i){
        if($DEBUG){print "\tFound ENDDO line.\n"};
        if($rules{'enddowithblock'}){
          $incrementCurrent = 0;
        }else{
          $incrementCurrent = -$rules{'indentdo'};
        }
        $incrementNext = -$rules{'indentdo'};
      }elsif($line =~ /^continue$/i){
        if($DEBUG){print "\tFound CONTINUE line.\n"};
        if($rules{'continuewithblock'}){
          $incrementCurrent = 0;
        }else{
          $incrementCurrent = -$rules{'indentdo'};
        }
        $incrementNext = -$rules{'indentdo'};
      }elsif($line =~ /^if.*then\s*$/i){
        if($DEBUG){print "\tFound IF...THEN line.\n"};
        $incrementCurrent = 0;
        $incrementNext    = $rules{'indentif'};
      }elsif($inContinuation && $line =~ /.*then\s*$/i){
        if($DEBUG){print "\tFound IF...THEN continuation line.\n"};
        $incrementCurrent = 2;
        $incrementNext    = $rules{'indentif'};
      }elsif($line =~ /^(elseif|else if).*\s*$/i){
        if($DEBUG){print "\tFound ELSEIF line.\n\tline:$line\n"};
        $incrementCurrent = -$rules{'indentif'};
        $incrementNext    = 0;
      }elsif($line =~ /^else.*\s*$/i){
        if($DEBUG){print "\tFound ELSE line.\n\tline:$line\n"};
        $incrementCurrent = -$rules{'indentif'};
        $incrementNext    = 0;
      }elsif($line =~ /^(endif|end if).*\s*$/i){
        if($DEBUG){print "\tFound ENDIF line.\n"};
        if($rules{'endifwithblock'}){
          $incrementCurrent = 0;
        }else{
          $incrementCurrent = -$rules{'indentif'};
        }
        $incrementNext = -$rules{'indentif'};
      }elsif(! $inContinuation){
        if($DEBUG){print "\tFound nominal line.\n"};
        $incrementCurrent = 0;
        $incrementNext    = 0;
      }
#
      if($DEBUG){
        print "\t\tincrementCurrent = $incrementCurrent\n";
        print "\t\tincrementNext    = $incrementNext\n";
      }
      return($incrementCurrent,$incrementNext,@warningList);
    }

    sub remove_lineNumberSpace{
#
#     This routine removes line numbers and leading spaces from a line of code.
#
#     There are two INPUT arguments: (1) the line to be processed; and (2)
#     the rules hash.
#
#     There is one OUTPUT argument: (1) the line's indentation; and (2) the
#     processed line with leading spaces and line numbers removed.
#
#
      use strict;
      my($line,%rules) = @_;
      my($leadingSpaces,$lineNumber);
      my($DEBUG,$lineIndent,$trimmedLine);
      $DEBUG = $rules{'debug'};
#
#     Remove leading spaces and line numbers from the line sent.
#
      if($DEBUG){print "\n\n\t\tInside remove_lineNumberSpace: line = $line.\n"}
      if($line =~ /^([\s\d]+)([a-zA-Z].*)\s*$/){
        if($DEBUG){print "MATCH 1\n"};
        $leadingSpaces = $1;
        $trimmedLine = $2;
        $lineIndent = length($leadingSpaces);
        $lineNumber = $leadingSpaces;
        $lineNumber =~ s/\s//g;
      }elsif($line =~ /^(\s*)([a-zA-Z].*)\s*$/){
        if($DEBUG){print "MATCH 2\n"};
        $leadingSpaces = $1;
        $trimmedLine = $2;
        $lineIndent = length($leadingSpaces);
      }elsif($line =~ /^(     \$\s*)(\S.*)\s*$/){
        if($DEBUG){print "MATCH 3\n"};
        $leadingSpaces = $1;
        $trimmedLine = $2;
        $lineIndent = length($leadingSpaces);
      }else{
        if($DEBUG){print "MATCH 4\n"};
        print "\nCurrent Link: -->$line<--\n";
        die "\n\nFAIL!!!\n\n";
        $trimmedLine = " ";
        $lineIndent = -1;
      }
#
      return ($lineIndent,$trimmedLine);
    }

    sub isCommentLine{
#
#     This routine checks to see if this is a comment line.
#
#     There are two OUTPUT arguments: (1) a 1 if the whole line is a
#     comment and 0 if it is not; and (2) the line without any trailing
#     comment section.
#
#
      use strict;
      my($line,%rules) = @_;
      my($isCommentLine);
      my($DEBUG,$isF77,$trimmedLine);
      $DEBUG = $rules{'debug'};
      $isF77 = $rules{'isF77'};
      $trimmedLine = $line;
#
#     Check to see if the full line is a comment.
#
      $isCommentLine = 0;
      if($isF77){
        unless($line =~ /^\s/){
          $isCommentLine = 1;
        }
      }else{
        if($line =~ /^\s*!/){
          $isCommentLine = 1;
        }elsif($line =~ /^(.+)!.*/){
          $trimmedLine = $1;
        }
      }
#
      return ($isCommentLine,$trimmedLine);
    }

    sub continuationLineCheck{
#
#     This routine checks to see if the current line is a continuation
#     line. If so, the output variable $inContinuation is returned TRUE.
#     Increment values for the current line and for the next line are also
#     set and returned.
#
#     There are three INPUT arguments: (1) $inContinuation; (2)
#     $trimmedLine; (3) $fullLine; and (4) %rules.
#
#     There are three OUTPUT arguments: (1) $inContinuation; (2)
#     $nextContinuation; (3) $incrementCurrent; (4) $incrementNext, and (5)
#     $trimmedLine.
#
#
      use strict;
      my($inContinuation,$trimmedLine,$fullLine,%rules) = @_;
      my($nextContinuation,$incrementCurrent,$incrementNext);
      my($DEBUG);
      $DEBUG = $rules{'debug'};
#
#     Look at the line sent in to determine if it's a special kind of line.
#     If so, check the rules to determine indentation increments for this
#     line and the next one.
#
      if($DEBUG){print "\n\n\t\tInside continuationLineCheck: line = $fullLine.\n"}
      if($rules{'isF77'}){
        if($fullLine =~ /^     \$/){
          if($DEBUG){print "\tFound CONTINUATION line.\n"};
          $trimmedLine =~ s/^\s*\$\s*//;
          $incrementCurrent = $rules{'continuationIndent'};
          $incrementNext    = 0;
          $inContinuation   = 1;
          $nextContinuation = 0;
        }else{
          $incrementCurrent = 0;
          $incrementNext    = 0;
          $inContinuation   = 0;
          $nextContinuation = 0;
        }
      }else{
        $incrementCurrent = 0;
        $incrementNext    = 0;
        $inContinuation   = 0;
        $nextContinuation = 0;
      }
#
      if($DEBUG){
        print "\t\tincrementCurrent = $incrementCurrent\n";
        print "\t\tincrementNext    = $incrementNext\n";
      }
      return($inContinuation,$nextContinuation,$incrementCurrent,$incrementNext,$trimmedLine);
    }
